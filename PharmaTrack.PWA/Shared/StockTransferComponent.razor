@using PharmaTrack.PWA.Helpers
@using PharmaTrack.Core.DBModels;
@using PharmaTrack.Core.DTOs;
@inject InventoryService InventoryService;
<h5>Stock Transfer</h5>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
    <div class="row">
        <div class="col-4">
            <div class="input-group mb-3">
                <span role="button" @onclick="async () => await ShowToastForScanning()" title="Click to scan barcode" class="bg-success input-group-text bi bi-upc-scan"></span>
                <input id="upc"
                       @ref="upcInput"
                       @bind-value="eventModel.UPC"
                       @bind-value:event="oninput"
                       @onkeydown="HandleUpcKeyDown"
                       @onkeydown:preventDefault="preventDefaultOnEnter"
                       placeholder="UPC"
                       class="form-control" />
                <button class="btn btn-info bi bi-search" type="button" @onclick="async () => await OnUPCSearch.InvokeAsync(eventModel.UPC)"></button>
            </div>
        </div>
        <div class="col-4">
            <div class="input-group mb-3">
                <span class="input-group-text bi bi-code"></span>
                <InputText id="npn"
                           @bind-Value="eventModel.NPN"
                           placeholder="NPN"
                           class="form-control" />
            </div>
        </div>
        <div class="col-4">
            <div class="input-group mb-3">
                <span class="input-group-text bi bi-code"></span>
                <InputText id="DIN"
                           @bind-Value="eventModel.DIN"
                           placeholder="DIN"
                           class="form-control" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text">Product Name</span>
                <InputText id="din"
                           @bind-Value="eventModel.Name"
                           class="form-control" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text">Product Brand</span>
                <InputText id="Brand"
                           @bind-Value="eventModel.Brand"
                           class="form-control" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-3">
            <div class="input-group mb-3">
                <span class="input-group-text bi bi-arrow-left-right"></span>
                <InputSelect id="type"
                             @bind-Value="eventModel.Type"
                             class="form-select">
                    @foreach (var t in Enum.GetValues<TransactionType>())
                    {
                        <option value="@t">@t</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="col-3">
            <div class="input-group mb-3">
                <span class="input-group-text bi-hash"></span>
                <InputNumber id="quantity"
                             min="1"
                             max="100"
                             @bind-Value="eventModel.Quantity"
                             class="form-control" />
            </div>
        </div>
        <div class="col-3">
            <div class="form-check form-check-reverse">
                <input class="form-check-input"
                       type="checkbox"
                       id="keepDataCheck"
                       @bind="keepAfterSave" />
                <label class="form-check-label small" for="keepDataCheck">
                    Keep from data after saving
                </label>
            </div>
        </div>
        <div class="col-3 text-end">
            @if (isSaving)
            {
                <button class="btn btn-sm btn-primary bi bi-floppy mx-1" disabled>
                    <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                    <span role="status">Saving ...</span>
                </button>
            }
            else
            {
                <button type="submit" class="btn btn-sm btn-primary bi bi-floppy mx-1">
                    <span class="ms-1">Save</span>
                </button>
            }

            <button class="btn btn-sm btn-warning bi bi-x-lg mx-1" @onclick="ResetForm">
                <span class="ms-1">Reset</span>
            </button>
        </div>

    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>
@code {
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnReset { get; set; }
    [Parameter] public EventCallback<string> OnUPCSearch { get; set; }

    private ElementReference upcInput;
    private bool isSaving = false;
    private bool keepAfterSave = true;
    private EditContext editContext = default!;
    public StockTransferRequest eventModel = new() { Quantity = 1, Type = TransactionType.In };
    protected override void OnInitialized()
    {
        // create an EditContext you can use to trigger validation
        editContext = new EditContext(eventModel);
    }
    private bool preventDefaultOnEnter;
    // this method is called on every key-down in the <input>
    private async Task HandleUpcKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // tell Blazor to suppress the Enter
            preventDefaultOnEnter = true;
            // run your lookup
            await OnUPCSearch.InvokeAsync(eventModel.UPC);
        }
        else
        {
            // allow all other keys
            preventDefaultOnEnter = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        // this will re-run all validations, including IValidatableObject
        if (!editContext.Validate())
            return;

        try
        {
            isSaving = true;
            StateHasChanged();
            await InventoryService.StockTransferAsync(eventModel);
            ShowToastForSuccessSave();

            await OnSaved.InvokeAsync();
        }
        catch (HttpRequestException ex)
        {
            ShowToastForError(ex.Message);
        } finally
        {
            isSaving = false;
            StateHasChanged();
            if (!keepAfterSave)
            {
                await ResetForm();
            }
        }
    }

    private async Task ResetForm()
    {
        eventModel = new() { Quantity = 1, Type = TransactionType.In };
        editContext = new EditContext(eventModel);
        await OnReset.InvokeAsync();
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private async Task ShowToastForScanning() {
        messages.Add(ToastForScanning());
        await upcInput.FocusAsync();
    }
    private void ShowToastForSuccessSave() => messages.Add(ToastForSuccessSave());
    private void ShowToastForError(string message) => messages.Add(ToastForError(message));

    private ToastMessage ToastForError(string message)
    => new ToastMessage
    {
        Type = ToastType.Danger,
        Message = $"{message}. DateTime: {DateTime.Now}",
    };

    private ToastMessage ToastForSuccessSave()
    => new ToastMessage
    {
        Type = ToastType.Success,
        Message = $"Stock transfer saved successfully. DateTime: {DateTime.Now}",
    };

    private ToastMessage ToastForScanning()
    => new ToastMessage
    {
    Type = ToastType.Info,
        Message = $"Ready to scan barcode.",
    };

}
