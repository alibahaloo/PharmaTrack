@using System.ComponentModel.DataAnnotations
@using PharmaTrack.PWA.Helpers
@using PharmaTrack.Core.DBModels;
@using PharmaTrack.Core.DTOs;
@inject ScheduleService scheduleService
@inject AuthService authService

<EditForm Model="eventModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <AutoComplete @bind-Value="eventModel.UserName"
        Id="usernameList"
        TItem="UserDto"
        DataProvider="UsersDataProvider"
        PropertyName="UserName"
        Placeholder="Search a user..."
        OnChanged="(UserDto u) => OnAutoCompleteChanged(u)" />
    </div>

    <div class="row mb-3 g-3 align-items-center">
        <div class="col-auto">
            <label for="date" class="col-form-label">Date:</label>
        </div>
        <div class="col-auto">
            <DateInput Id="date"
            TValue="DateOnly"
            @bind-Value="eventModel.Date" />
        </div>
    </div>

    <div class="row mb-3 g-3 align-items-center">
        <div class="col-auto">
            <label for="startTime" class="col-form-label">Start:</label>
        </div>
        <div class="col-auto">
            <TimeInput 
            Id="startTime"
            TValue="TimeOnly"
            @bind-Value="eventModel.Start" />
        </div>

        <div class="col-auto">
            <label for="endTime" class="col-form-label">End:</label>
        </div>
        <div class="col-auto">
            <TimeInput Id="endTime"
            TValue="TimeOnly"
            @bind-Value="eventModel.End" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <TextAreaInput @bind-Value="eventModel.Description"
            Placeholder="Task Description"
            Rows="3" />
        </div>
    </div>

    <div class="row mb-3 text-end">
        <div class="col">
            @if (isLoading)
            {
                <button class="btn btn-primary me-1" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                    <span role="status">Loading...</span>
                </button>
            } else
            {
                <button type="submit" class="btn btn-primary me-1">Save</button>
            }
            
            <button type="button" class="btn btn-secondary" @onclick="OnCloseCallback">Cancel</button>
        </div>
    </div>
</EditForm>

@code {
    // View-model with DataAnnotations
    public class FormModel : IValidatableObject
    {
        [Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; } = default!;

        [Required(ErrorMessage = "Date is required")]
        public DateOnly Date { get; set; }

        [Required(ErrorMessage = "Start time is required")]
        public TimeOnly Start { get; set; }

        [Required(ErrorMessage = "End time is required")]
        public TimeOnly End { get; set; }

        [Required(ErrorMessage = "Description is required")]
        public string Description { get; set; } = default!;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // 1) Date must be today or later
            if (Date < DateOnly.FromDateTime(DateTime.Today))
            {
                yield return new ValidationResult(
                    "Date cannot be in the past.",
                    new[] { nameof(Date) }
                );
            }

            // 2) End must be strictly after Start
            if (End <= Start)
            {
                yield return new ValidationResult(
                    "End time must be later than Start time.",
                    new[] { nameof(End) }
                );
            }
        }
    }

    private bool isLoading = false;

    private FormModel eventModel = new()
        {
        // prefill today’s date
            Date = DateOnly.FromDateTime(DateTime.Today)
        };

    private EditContext editContext = default!;

    protected override void OnInitialized()
    {
        // create an EditContext you can use to trigger validation
        editContext = new EditContext(eventModel);
    }

    [Parameter] public EventCallback<MouseEventArgs> OnCloseCallback { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnSaveCallback { get; set; }


    private IEnumerable<UserDto>? users;

    private async Task<AutoCompleteDataProviderResult<UserDto>> UsersDataProvider(AutoCompleteDataProviderRequest<UserDto> request)
    {
        if (users is null)
            users = await GetUsers();

        return await Task.FromResult(request.ApplyTo(users.OrderBy(u => u.UserName)));
    }

    private async Task<IEnumerable<UserDto>> GetUsers()
    {
        return await authService.GetUsernames();
    }

    private void OnAutoCompleteChanged(UserDto u)
    {
        eventModel.UserName = u?.UserName!;
    }

    private async Task HandleValidSubmit()
    {
        // this will run ALL your [Required] checks + your IValidatableObject.Validate()
        if (!editContext.Validate())
            return;

        isLoading = true;
        // build the event
        var evt = new ScheduleTask
        {
            UserName = eventModel.UserName!,
            Start = eventModel.Date.ToDateTime(eventModel.Start),
            End = eventModel.Date.ToDateTime(eventModel.End),
            Description = eventModel.Description!
        };

        try
        {
            await scheduleService.CreateScheduleAsync(evt);
            await OnSaveCallback.InvokeAsync();
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            isLoading = false;
        }
    }
}
