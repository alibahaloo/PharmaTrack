@using PharmaTrack.Core.DBModels;
@using PharmaTrack.Core.DTOs;
@using PharmaTrack.PWA.Helpers
@inject InventoryService InventoryService;
@inject DrugService DrugService;
@if (product != null)
{
    <EditForm EditContext="editContext" OnSubmit="HandleSubmit">
        <div class="row">
            <div class="col">
                <div class="input-group mb-3">
                    <span class="input-group-text">Name</span>
                    <TextInput @bind-Value="product.Name"
                               class="form-control"
                               Placeholder="Product Name" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="input-group mb-3">
                <span class="input-group-text">Brand</span>
                <TextInput @bind-Value="product.Brand"
                           class="form-control"
                           Placeholder="Product Brand" />
            </div>
        </div>

        <div class="row">
            <div class="col-4">
                <div class="input-group mb-3">
                    <span class="input-group-text">UPC</span>
                    <TextInput @bind-Value="product.UPC"
                               class="form-control"
                               Placeholder="Product UPC" />
                </div>
            </div>
            <div class="col-4">
                <div class="input-group mb-3">
                    <span class="input-group-text">DIN</span>
                    <TextInput @bind-Value="product.DIN"
                               class="form-control"
                               Placeholder="Product DIN" />
                    <button class="btn btn-info bi bi-search" type="button" title="Validate" @onclick="ValidateDINAsync"></button>
                </div>
            </div>
            <div class="col-4">
                <div class="input-group mb-3">
                    <span class="input-group-text">NPN</span>
                    <TextInput @bind-Value="product.NPN"
                               class="form-control"
                               Placeholder="Product NPN" />
                </div>
            </div>
        </div>

        <div class="row text-end">
            <div class="col">
                @if (isSaving)
                {
                    <button class="btn btn-sm btn-primary bi bi-floppy mx-1" disabled>
                        <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                        <span role="status">Saving ...</span>
                    </button>
                }
                else
                {
                    <button type="submit" class="btn btn-sm btn-primary bi bi-floppy mx-1">
                        <span class="ms-1">Save</span>
                    </button>
                }
                <button type="button" role="button" class="btn btn-sm btn-warning bi bi-x-lg mx-1" @onclick="OnCloseCallback">
                    <span class="ms-1">Cancel</span>
                </button>
            </div>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
} else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<MouseEventArgs> OnCloseCallback { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnSaveCallback { get; set; }
    [Parameter] public int ProductId { get; set; } = default!;

    private EditContext editContext = default!;
    private ValidationMessageStore messageStore = default!;

    private Product? product;
    private bool isSaving = false;

    private FieldIdentifier modelIdentifier = default!;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        product = await InventoryService.GetProductByIdAsync(ProductId);
        if (product == null)
        {
            throw new Exception();
        }
        editContext = new EditContext(product);
        messageStore = new ValidationMessageStore(editContext);
        //For generic errors
        modelIdentifier = new FieldIdentifier(editContext.Model, fieldName: string.Empty);
    }

    private async Task ValidateDINAsync()
    {
        messageStore.Clear();
        if (string.IsNullOrEmpty(product?.DIN)) return;
        try
        {
            var drug = await DrugService.GetDrugInfoByDINAsync(product.DIN);
            if (drug == null)
            {
                messageStore.Add(editContext.Field(nameof(product.DIN)), "Invalid DIN. No drug found with the given DIN.");
            }
        }
        catch (Exception ex)
        {
            messageStore.Add(modelIdentifier, ex.Message);
        } finally
        {
            editContext.NotifyValidationStateChanged();
        }
    }

    private async Task HandleSubmit()
    {
        messageStore.Clear();
        editContext.NotifyValidationStateChanged();
        if (!editContext.Validate())
            return;

        if (product == null) return;

        try
        {
            isSaving = true;
            await InventoryService.UpdateProductAsync(product);
            isSaving = false;
            await OnSaveCallback.InvokeAsync();
        }
        catch (Exception ex)
        {
            isSaving = false;
            messageStore.Add(editContext.Field(nameof(product.DIN)), ex.Message);
            editContext.NotifyValidationStateChanged();
        }
    }
}
