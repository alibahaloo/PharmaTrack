@page "/calendar"
@using PharmaTrack.PWA.Helpers
@inject ScheduleService ScheduleService
@inject IJSRuntime JSRuntime

<style>
    .weekday-header, .calendar-grid {
    width: 100%;
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    }

    .weekday-header {
    text-align: center;
    font-weight: bold;
    margin-bottom: 0.5rem;
    }

    .calendar-grid {
    gap: 1px;
    margin-bottom: 1rem;
    }

    .calendar-grid .cell {
    background-color: #fff;
    border: 1px solid #dee2e6;
    padding: 0.5rem;
    height: 110px;
    overflow-y: auto;
    overflow-x: hidden;
    box-sizing: border-box;
    }

    .week-grid {
    display: flex;
    }

    .week-col {
    flex: 1;
    min-width: 0; /* Prevents overflow issues */
    max-width: 14.2857%; /* 100 / 7 */
    }
</style>
<Modal @ref="modal" Title=@SelectedDate.ToLongDateString() Size="ModalSize.Large">
    <BodyTemplate>
        @{
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Username</th>
                        <th scope="col">Time</th>
                        <th scope="col">Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in SelectedDateEvents)
                    {
                        <tr>
                            <th scope="row">@item.UserName</th>
                            <td>@item.Start.ToShortTimeString()-@item.End.ToShortTimeString()</td>
                            <td>@item.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </BodyTemplate>
</Modal>

<div class="row">
    <div class="col-4">
        <span class="navbar-brand mb-0 fs-1">Calendar</span>
    </div>
    <div class="col-4 text-center">
        <div class="btn-group">
            <button class="btn btn-secondary" @onclick="GoToPrev">Prev</button>
            <button class="btn btn-secondary" @onclick="GoToToday">Today</button>
            <button class="btn btn-secondary" @onclick="GoToNext">Next</button>
        </div>
    </div>
    <div class="col-4 text-end">
        <div class="btn-group mb-2">
            <button class="btn @GetMonthlyClass()" @onclick="ShowMonthly">Monthly</button>
            <button class="btn @GetWeeklyClass()" @onclick="ShowWeekly">Weekly</button>
        </div>
        <div class="btn-group mb-2">
            <button class="btn btn-outline-primary">Team</button>
            <button class="btn btn-outline-primary">Individual</button>
        </div>
    </div>
</div>

@if (IsMonthlyView)
{
    var firstOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
    var startDayIdx = ((int)firstOfMonth.DayOfWeek + 6) % 7; // Monday=0, Sunday=6
    var daysInMonth = DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);
    var cells = Enumerable.Range(0, 42).Select(i =>
    {
        var dayNumber = i - startDayIdx + 1;
        return dayNumber >= 1 && dayNumber <= daysInMonth
        ? firstOfMonth.AddDays(dayNumber - 1)
        : (DateTime?)null;
    }).ToList();

    <div class="row">
        <div class="weekday-header">
            @foreach (var dayName in daysList)
            {
                <div>@dayName</div>
            }
        </div>
        <div class="calendar-grid">
            @foreach (var dt in cells)
            {
                @if (dt.HasValue)
                {
                    var dateEvents = Events.Where(e => e.Start.Date == dt.Value.Date);
                    bool isToday = dt.Value.Date == DateTime.Today;

                    var click = dt.HasValue && dateEvents.Count() > 0
                    ? EventCallback.Factory.Create(this, () => OnShowModalClick(dt.Value))
                    : EventCallback.Factory.Create(this, () => Task.CompletedTask);

                    <div class="cell" @onclick="click">
                        <div class="row">
                            @if (isToday)
                            {
                                <div class="col-6 fw-bold text-black">@dt.Value.Day</div>
                            }
                            else
                            {
                                <div class="col-6 text-secondary">@dt.Value.Day</div>
                            }

                            @if (dateEvents.Count() > 0)
                            {
                                <div class="col-6 text-end fw-bold">
                                    <span class="badge rounded-pill bg-danger small">@dateEvents.Count()</span>
                                </div>
                                @foreach (var ev in dateEvents)
                                {
                                    <div class="small text-truncate" style="font-size: 12px" title="@ev.Description">
                                        <small>
                                            <u><strong>@ev.Start.ToShortTimeString()-@ev.End.ToShortTimeString()</strong></u>: @ev.Description
                                        </small>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                } else
                {
                    <div class="cell">
                    </div>
                }
            }
        </div>
    </div>
}
else
{
    <div class="week-grid" style="height: 300px;">
        @for (int d = 0; d < 7; d++)
        {
            bool isToday = WeekStart.AddDays(d) == DateTime.Today;
            var todayClass = isToday ? "fw-bold text-black" : "text-secondary";
            var dateEvents = Events.Where(e => e.Start.Date == WeekStart.AddDays(d).Date);

            var index = d; // Freeze the current value
            var currentDate = WeekStart.AddDays(index);

            var weeklyClick = dateEvents.Count() > 0
            ? EventCallback.Factory.Create(this, () => OnShowModalClick(currentDate))
            : EventCallback.Factory.Create(this, () => Task.CompletedTask);

            <div class="week-col" @onclick="weeklyClick">
                <div class="text-center border-bottom @todayClass">
                    <span class="m-2">
                        @daysList[d] @WeekStart.AddDays(d).ToShortDateString()
                    </span>
                    @if (dateEvents.Any())
                    {
                        <span class="badge rounded-pill bg-danger small">@dateEvents.Count()</span>
                    }
                </div>
                <div class="border" style="height: 500px; overflow-y: auto;">
                    @foreach (var ev in dateEvents)
                    {
                        <div class="small m-2" style="font-size: 12px" title="@ev.Description">
                            <small>
                                <u><strong>@ev.Start.ToShortTimeString()-@ev.End.ToShortTimeString()</strong></u>: @ev.Description
                            </small>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    private List<string> daysList = new List<string>{
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"
    };
    private Modal modal = default!;

    private DateTime SelectedDate;
    private DateTime CurrentDate = DateTime.Today;
    private bool IsMonthlyView = true;
    private List<ScheduleEvent> Events = new();
    private List<ScheduleEvent> SelectedDateEvents = new();

    private DateTime WeekStart => StartOfWeek(CurrentDate, DayOfWeek.Monday);

    protected override async Task OnInitializedAsync() => await LoadEvents();

    private string GetMonthlyClass() => IsMonthlyView ? "btn-primary" : "btn-outline-primary";
    private string GetWeeklyClass() => IsMonthlyView ? "btn-outline-primary" : "btn-primary";

    private async Task OnShowModalClick(DateTime dt)
    {
        SelectedDate = dt;
        SelectedDateEvents = await ScheduleService.GetDailySchedulesAsync(dt);
        await modal.ShowAsync();
    }

    private async Task LoadEvents()
    {
        Events = IsMonthlyView
            ? await ScheduleService.GetMonthlySchedulesAsync(CurrentDate)
            : await ScheduleService.GetWeeklySchedulesAsync(WeekStart);
    }

    private async Task ShowMonthly()
    {
        IsMonthlyView = true;
        await LoadEvents();
    }

    private async Task ShowWeekly()
    {
        IsMonthlyView = false;
        await LoadEvents();
    }

    private async Task GoToToday()
    {
        CurrentDate = DateTime.Today;
        await LoadEvents();
    }

    private async Task GoToPrev()
    {
        CurrentDate = IsMonthlyView
            ? CurrentDate.AddMonths(-1)
            : CurrentDate.AddDays(-7);
        await LoadEvents();
    }

    private async Task GoToNext()
    {
        CurrentDate = IsMonthlyView
            ? CurrentDate.AddMonths(1)
            : CurrentDate.AddDays(7);
        await LoadEvents();
    }

    private static DateTime StartOfWeek(DateTime dt, DayOfWeek start)
    {
        int diff = (7 + (dt.DayOfWeek - start)) % 7;
        return dt.AddDays(-diff).Date;
    }
}