@page "/calendar"
@using PharmaTrack.PWA.Helpers
@using PharmaTrack.Core.DBModels
@using PharmaTrack.Core.DTOs
@inject ScheduleService ScheduleService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<style>
    .weekday-header,
    .calendar-grid {
        width: 100%;
        display: grid;
        grid-template-columns: repeat(7, 1fr);
    }

    .weekday-header {
        text-align: center;
        font-weight: bold;
    }

    .calendar-grid {
        /* gap: 1px; */
        margin-bottom: 1rem;
    }

    .calendar-grid .cell {
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
        background-color: #fff;
        padding: 0.3rem;
        height: 110px;
    }

    .calendar-grid .cell .cell-body {
        flex-grow: 1;
        overflow-y: auto;
        overflow-x: hidden;
    }

    .week-grid {
        display: flex;
    }

    .week-col {
        flex: 1;
        min-height: 500px;
        min-width: 0; /* Prevents overflow issues */
        max-width: 14.2857%; /* 100 / 7 */
    }
</style>
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<Modal @ref="createScheduleModal" UseStaticBackdrop="true" />
<Modal @ref="modal" Title="@SelectedDate.ToLongDateString()" Size="ModalSize.Large">
    <BodyTemplate>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Username</th>
                    <th scope="col">Time</th>
                    <th scope="col">Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in SelectedDateEvents)
                {
                    <tr>
                        <th scope="row">@item.UserName</th>
                        <td>@item.Start.ToShortTimeString()-@item.End.ToShortTimeString()</td>
                        <td>@item.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    </BodyTemplate>
</Modal>

<div class="row mb-1">
    <div class="col-8">
        <button class="btn-sm btn btn-secondary" @onclick="GoToToday">Today</button>
        <button class="btn-sm btn btn-secondary bi bi-chevron-left" @onclick="GoToPrev"></button>
        <button class="btn-sm btn btn-secondary bi bi-chevron-right" @onclick="GoToNext"></button>
        <button class="btn btn-sm btn btn-primary bi-calendar-plus" @onclick="OnShowCreateScheduleModalClick"></button>
    </div>
    <div class="col-4 d-flex align-items-center justify-content-end gap-2">
        <div class="btn-group">
            <button class="btn btn-sm @GetMonthlyClass()" @onclick="ShowMonthly">Monthly</button>
            <button class="btn btn-sm @GetWeeklyClass()" @onclick="ShowWeekly">Weekly</button>
        </div>

        <div class="input-group input-group-sm">
            <span class="input-group-text" id="basic-addon1">Filter by User</span>
            <input @bind="SelectedUser"
                   @onselectionchange="LoadEvents"
                   class="form-control form-control-sm"
                   list="usersList"
                   id="usernameList"
                   placeholder="Select user ..."
                   aria-label="Username"
                   aria-describedby="basic-addon1" />
            <datalist id="usersList">
                @foreach (var item in Users)
                {
                    <option value="@item.UserName"></option>
                }
            </datalist>
        </div>

        <div class="btn-group">
            <button class="btn btn-sm btn-warning bi bi-x" @onclick="ClearUserFilter"></button>
        </div>
    </div>
</div>

@if (IsMonthlyView)
{
    var firstOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
    var startDayIdx = ((int)firstOfMonth.DayOfWeek + 6) % 7; // Monday=0, Sunday=6
    var daysInMonth = DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);
    var cells = Enumerable.Range(0, 42).Select(i =>
    {
        var dayNumber = i - startDayIdx + 1;
        return dayNumber >= 1 && dayNumber <= daysInMonth
        ? firstOfMonth.AddDays(dayNumber - 1)
        : (DateTime?)null;
    }).ToList();

    <div class="weekday-header">
        @foreach (var dayName in daysList)
        {
            <div class="text-black bg-white border border-1">@dayName</div>
        }
    </div>

    <div class="calendar-grid">
        @foreach (var dt in cells)
        {
            @if (isLoading)
            {
                <div class="cell border border-1">
                    <p class="placeholder-glow">
                        <span class="placeholder col-12 bg-secondary"></span>
                    </p>
                </div>
            }
            else if (dt.HasValue)
            {
                var dateEvents = Events.Where(e => e.Start.Date == dt.Value.Date).ToList();
                int eventCount = dateEvents.Count();
                bool isToday = dt.Value.Date == DateTime.Today;
                var click = dateEvents.Any()
                ? EventCallback.Factory.Create(this, () => OnShowModalClick(dt.Value))
                : EventCallback.Factory.Create(this, () => Task.CompletedTask);


                <div class="cell border border-1">
                    <!-- Header -->
                    <div class="cell-header row align-items-center">
                        <div class="col-6 d-flex align-items-center">
                            @if (isToday)
                            {
                                <span class="fw-bold text-black text-decoration-underline">@dt.Value.Day</span>
                            }
                            else
                            {
                                <span class="text-secondary">@dt.Value.Day</span>
                            }

                            @if (dt >= DateTime.Today)
                            {
                                <span class="bi bi-calendar-plus text-primary ms-1 small" role="button" @onclick="() => CreateScheduleWithDate(dt)"></span>
                            }
                        </div>
                        @if (eventCount > 0)
                        {
                            <div class="col-6 text-end fw-bold">
                                <span class="badge rounded-pill bg-danger small">@eventCount</span>
                            </div>
                        }
                    </div>

                    <!-- Body -->
                    @if (eventCount > 0)
                    {
                        <div class="cell-body row" @onclick="click">
                            <div class="col">
                                @foreach (var ev in dateEvents)
                                {
                                    <div class="text-black text-truncate" style="font-size:12px" title="@ev.UserName - @ev.Description">
                                        <u><strong>@ev.Start.ToString("hh:mm tt")-@ev.End.ToString("hh:mm tt")</strong></u>: @ev.Description
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="cell border border-1"></div>
            }
        }
    </div>
}
else
{
    <div class="week-grid">
        @for (int d = 0; d < 7; d++)
        {
            bool isToday = WeekStart.AddDays(d) == DateTime.Today;
            var todayClass = isToday ? "fw-bold" : "fw-light";
            var dateEvents = Events.Where(e => e.Start.Date == WeekStart.AddDays(d).Date);
            int eventCount = dateEvents.Count();

            var index = d;
            var currentDate = WeekStart.AddDays(index);
            var weeklyClick = dateEvents.Any()
            ? EventCallback.Factory.Create(this, () => OnShowModalClick(currentDate))
            : EventCallback.Factory.Create(this, () => Task.CompletedTask);

            <div class="week-col bg-white text-black">
                <div class="border text-center p-1 @todayClass">

                    @if (currentDate >= DateTime.Today)
                    {
                        <span class="bi bi-calendar-plus text-primary ms-1 small" role="button" @onclick="() => CreateScheduleWithDate(currentDate)"></span>
                    }
                    
                    <span class="m-2">
                        @daysList[d] @WeekStart.AddDays(d).ToShortDateString()
                    </span>
                    @if (eventCount > 0)
                    {
                        <span class="badge rounded-pill bg-danger small">@eventCount</span>
                    }
                </div>
                <div class="border" style="height: 500px; overflow-y: auto;" @onclick="weeklyClick">
                    @if (isLoading)
                    {
                        <div class="m-1">
                            <p class="placeholder-glow">
                                <span class="placeholder col-12 bg-secondary"></span>
                            </p>
                        </div>
                    }
                    else
                    {
                        @foreach (var ev in dateEvents)
                        {
                            <div class="small m-2" title="@ev.Description">
                                <u><strong>@ev.Start.ToString("hh:mm tt")-@ev.End.ToString("hh:mm tt")</strong></u>: @ev.Description
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>
}

@code {
    private bool isLoading;
    private List<string> daysList = new()
    {
        "Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"
    };
    private Modal modal = default!;
    private Modal createScheduleModal = default!;
    private DateTime SelectedDate;
    private DateTime CurrentDate = DateTime.Today;
    private bool IsMonthlyView = true;
    private List<ScheduleTask> Events = new();
    private List<ScheduleTask> SelectedDateEvents = new();
    private List<UserDto> Users = new();
    private string SelectedUser = string.Empty;

    private DateTime WeekStart => StartOfWeek(CurrentDate, DayOfWeek.Monday);

    List<ToastMessage> messages = new List<ToastMessage>();
    private ToastMessage ToastForInfo(string message)
    => new ToastMessage
    {
        Type = ToastType.Info,
        Message = message,
    };

    private ToastMessage ToastForSuccess(string message)
    => new ToastMessage
    {
        Type = ToastType.Success,
        Message = message,
    };

    private ToastMessage ToastForWarning(string message)
    => new ToastMessage
    {
        Type = ToastType.Warning,
        Message = message,
    };

    private ToastMessage ToastForError(string message)
    => new ToastMessage
    {
        Type = ToastType.Danger,
        Message = $"An Error Occurred: {message}",
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        Users = await AuthService.GetUsernames();
    }

    private async Task ClearUserFilter()
    {
        SelectedUser = string.Empty;
        await LoadEvents();
    }

    private string GetMonthlyClass() => IsMonthlyView ? "btn-primary" : "btn-outline-primary";
    private string GetWeeklyClass() => IsMonthlyView ? "btn-outline-primary" : "btn-primary";

    private async Task OnShowModalClick(DateTime dt)
    {
        SelectedDate = dt;
        SelectedDateEvents = await ScheduleService.GetDailySchedulesAsync(dt);
        await modal.ShowAsync();
    }

    private async Task OnShowCreateScheduleModalClick()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnCloseCallback", EventCallback.Factory.Create<MouseEventArgs>(this, HideCreateScheduleModal) },
            { "OnSaveCallback",   EventCallback.Factory.Create<MouseEventArgs>(this, OnSaveCallback) }
        };

        await createScheduleModal.ShowAsync<CreateScheduleModal>(
            title: "Create new schedule",
            parameters: parameters
        );
    }

    private async Task CreateScheduleWithDate(DateTime? date)
    {
        var parameters = new Dictionary<string, object>
            {
                { "OnCloseCallback", EventCallback.Factory.Create<MouseEventArgs>(this, HideCreateScheduleModal) },
                { "OnSaveCallback",   EventCallback.Factory.Create<MouseEventArgs>(this, OnSaveCallback) }
            };
        if (date != null)
        {
            parameters.Add("Date", date);
        } 

        await createScheduleModal.ShowAsync<CreateScheduleModal>(
            title: "Create new schedule",
            parameters: parameters
        );
    }


    private async Task OnSaveCallback(MouseEventArgs e)
    {
        messages.Add(ToastForSuccess("Task created successfully."));
        await LoadEvents();
        await createScheduleModal.HideAsync();
    }

    private void HideCreateScheduleModal(MouseEventArgs e) =>
      createScheduleModal.HideAsync();

    private async Task LoadEvents()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            Events = IsMonthlyView
              ? await ScheduleService.GetMonthlySchedulesAsync(CurrentDate, SelectedUser)
              : await ScheduleService.GetWeeklySchedulesAsync(WeekStart, SelectedUser);
        }
        catch(Exception ex)
        {
            messages.Add(ToastForError($"ERROR: {ex.Message}"));
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ShowMonthly()
    {
        IsMonthlyView = true;
        await LoadEvents();
    }

    private async Task ShowWeekly()
    {
        IsMonthlyView = false;
        await LoadEvents();
    }

    private async Task GoToToday()
    {
        CurrentDate = DateTime.Today;
        await LoadEvents();
    }

    private async Task GoToPrev()
    {
        CurrentDate = IsMonthlyView
          ? CurrentDate.AddMonths(-1)
          : CurrentDate.AddDays(-7);
        await LoadEvents();
    }

    private async Task GoToNext()
    {
        CurrentDate = IsMonthlyView
          ? CurrentDate.AddMonths(1)
          : CurrentDate.AddDays(7);
        await LoadEvents();
    }

    private static DateTime StartOfWeek(DateTime dt, DayOfWeek start)
    {
        int diff = (7 + (dt.DayOfWeek - start)) % 7;
        return dt.AddDays(-diff).Date;
    }
}
