@page "/interactions"
@using PharmaTrack.PWA.Helpers
@using PharmaTrack.Core.DTOs;
@using PharmaTrack.Core.DBModels;
@inject DrugService DrugService

<div class="w-50">
    <div class="row mb-1">
        <div class="col-8">
            <button class="btn-sm btn btn-secondary bi bi-caret-left @GetPrevBtnStatus()" @onclick="LoadPrevPageAsync"></button>
            <button class="btn-sm btn btn-secondary bi bi-caret-right @GetNextBtnStatus()" @onclick="LoadNextPageAsync"></button>
            <small>@GetShowingText()</small>
        </div>
        <div class="col-4 d-flex align-items-center justify-content-end gap-2">
            <div class="input-group input-group-sm">
                <input class="form-control" type="search" placeholder="Search" aria-label="Search" />
            </div>

            <div class="btn-group btn-group-sm">
                <button class="btn btn-sm btn-primary bi bi-search" type="button"></button>
                <button class="btn btn-sm btn-warning bi bi-x"></button>
            </div>
        </div>
    </div>

    <table class="table table-sm table-hover">
        <thead>
            <tr>
                <th scope="col" style="width: 20px">Select</th>
                <th scope="col" style="width: 30px">Drug Code</th>
                <th scope="col" class="w-50">Brand Name</th>
                <th scope="col" style="width: 30px">DIN</th>
                <th scope="col" class="w-25">Categorization / Class</th>
            </tr>
        </thead>
        <tbody>
            @if (drugsResponse != null)
            {
                @foreach (var drug in drugsResponse.Data)
                {
                    <tr class="small">
                        <th scope="row" class="text-center">
                            <button type="button" class="btn btn-primary"
                                    style="--bs-btn-padding-y: .25rem; --bs-btn-padding-x: .5rem; --bs-btn-font-size: .75rem;">
                                Select
                            </button>
                        </th>
                        <th scope="row">@drug.DrugCode</th>
                        <td>@drug.BrandName</td>
                        <td>@drug.DrugIdentificationNumber</td>
                        <td>
                            <small>Categorization: @drug.ProductCategorization</small>
                            <br />
                            <small>Class: @drug.Class</small>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>




@code {
    private string searchTerm = string.Empty;
    private int curPage = 1;
    private int totalPageCount = 1;
    private int totalItemCount = 1;
    private PagedResponse<DrugProduct>? drugsResponse;
    private List<DrugListDto> drugList = new();
    private bool hasLoadedInitial = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDrugs();
    }

    private async Task LoadDrugs()
    {
        var query = new DrugQuery();
        drugsResponse = await DrugService.GetDrugsAsync(query, curPage);
        if (drugsResponse != null)
        {
            totalItemCount = drugsResponse.TotalItemCount;
            totalPageCount = drugsResponse.TotalPageCount;
        }
    }

    private async Task LoadNextPageAsync()
    {
        curPage++;
        await LoadDrugs();
    }

    private async Task LoadPrevPageAsync()
    {
        curPage--;
        await LoadDrugs();
    }

    private string GetShowingText()
    {
        int start = (curPage - 1) * 10 + 1;
        int end = Math.Min(curPage * 10, totalItemCount);
        return $"Showing {start}–{end} of {totalItemCount}";
    }

    private string GetPrevBtnStatus() => curPage == 1 ? "disabled" : string.Empty;
    private string GetNextBtnStatus() => curPage == totalPageCount ? "disabled" : string.Empty;

    /// <summary>
    /// Fired the first time the user focuses the input.
    /// Loads the “first page” (e.g. first 10) with no filter.
    /// </summary>
    private async Task LoadInitialOptions(FocusEventArgs args)
    {
        /*
        if (!hasLoadedInitial)
        {
            drugList = await DrugService.GetDrugListAsync();
            hasLoadedInitial = true;
            StateHasChanged();
        }*/
    }

    /// <summary>
    /// Fired on every keystroke.
    /// Uses the current input value as the 'startWith' filter.
    /// </summary>
    private async Task OnInputChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        drugList = await DrugService.GetDrugListAsync(searchTerm);
        StateHasChanged();
    }
}